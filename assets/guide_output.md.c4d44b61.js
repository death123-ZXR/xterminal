import{_ as o,H as p,o as r,c,L as t,w as n,k as s,a as e,V as a}from"./chunks/framework.1b5edb90.js";const k=JSON.parse('{"title":"Output","description":"","frontmatter":{},"headers":[],"relativePath":"guide/output.md","filePath":"guide/output.md"}'),i={name:"guide/output.md"},D=a('<h1 id="output" tabindex="-1">Output <a class="header-anchor" href="#output" aria-label="Permalink to &quot;Output&quot;">​</a></h1><p>Information maybe output in a number of ways and logged in the terminal instance. With the help of <a href="./../api/">write()</a> we can log data in <code>raw</code> format, as <code>html</code>.</p><h2 id="raw-data" tabindex="-1">Raw Data <a class="header-anchor" href="#raw-data" aria-label="Permalink to &quot;Raw Data&quot;">​</a></h2><p>Raw data may include strings and numbers.</p><p>Here is a simple <code>hello world</code> example:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">term</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div>',6),d=s("pre",null,[s("code",null,`Hello World!▊
`)],-1),y=s("h2",{id:"escape-characters",tabindex:"-1"},[e("Escape characters "),s("a",{class:"header-anchor",href:"#escape-characters","aria-label":'Permalink to "Escape characters"'},"​")],-1),u=s("p",null,"Below is a list of available and ready to use escape characters;",-1),C=a('<p><strong><code>\\n</code> - New line</strong></p><p>When the <code>\\n</code> character is encountered in the data to output, it moves the cursor to the next line. The data, after every instance of the <code>\\n</code> character, is rendereed on a new line.</p><p>Here is an example:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">term</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">Hello World!</span><span style="color:#A6ACCD;">\\n</span><span style="color:#C3E88D;">$ </span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div>',4),A=s("pre",null,[s("code",null,`Hello World!
$ ▊
`)],-1),F=a('<p>The same can be achieved using <a href="./../api/">writeln()</a> which writes the data passed on the current line, followed by a new line character.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">term</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeln</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">Hello World!</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">term</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">$ </span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div>',2),h=a('<p><strong><code>\\t</code> - Tab</strong></p><p>The tab character defaults to four (4) space characters.</p><p>Example:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">term</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeln</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">Hello World!</span><span style="color:#A6ACCD;">\\t</span><span style="color:#C3E88D;">You&#39;re Welcome.</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div>',4),_=s("pre",null,[s("code",null,`Hello World!    You're welcome.
▊
`)],-1),g=a('<h2 id="html-strings" tabindex="-1">HTML Strings <a class="header-anchor" href="#html-strings" aria-label="Permalink to &quot;HTML Strings&quot;">​</a></h2><p>You might want to output some HTML string, here is how you can do it;</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">term</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeln</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">&lt;b&gt;Bold Text&lt;/b&gt; - &lt;i&gt;Italics&lt;/i&gt;</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div>',3),m=s("p",null,[s("b",null,"Bold Text"),e(" - "),s("i",null,"Italics"),s("br"),e("▊")],-1),b=a(`<h3 id="attributes" tabindex="-1">Attributes <a class="header-anchor" href="#attributes" aria-label="Permalink to &quot;Attributes&quot;">​</a></h3><p>To output valid HTML tags with attributes, there must be a <strong>single space</strong> separation between the attributes in every opening tag.</p><p>For example: The following won&#39;t work as expected</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">term</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeln</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;b     class=&quot;text-blue&quot;&gt;Bold Blue Text&lt;/b&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">term</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeln</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;b style=&quot;color: dodgerblue    &quot;&gt;Bold Blue Text&lt;/b&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>Here is how it should be done</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-diff"><code><span class="line diff remove"><span style="color:#A6ACCD;">term</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeln</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;b     class=&quot;text-blue&quot;&gt;Bold Blue Text&lt;/b&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line diff add"><span style="color:#A6ACCD;">term</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeln</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;b class=&quot;text-blue&quot;&gt;Bold Blue Text&lt;/b&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span>
<span class="line diff remove"><span style="color:#A6ACCD;">term</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeln</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;b style=&quot;color: dodgerblue    &quot;&gt;Bold Blue Text&lt;/b&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line diff add"><span style="color:#A6ACCD;">term</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeln</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;b style=&quot;color: dodgerblue;&quot;&gt;Bold Blue Text&lt;/b&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span></code></pre></div><p>However, multiple spaces are <strong>okay</strong> in between the opening and closing tags. For example:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">term</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeln</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;b style=&quot;color: dodgerblue;&quot;&gt;Bold      Blue      Text&lt;/b&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="clear-screen" tabindex="-1">Clear Screen <a class="header-anchor" href="#clear-screen" aria-label="Permalink to &quot;Clear Screen&quot;">​</a></h2><p>To clear the entire terminal, you can do it programmatically using <a href="./../api/">clear()</a>.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">term</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clear</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><p>Work with terminal events that help you trigger actions on the go.</p>`,13);function T(w,f,x,v,q,S){const l=p("browser-preview");return r(),c("div",null,[D,t(l,null,{default:n(()=>[d]),_:1}),y,u,s("ul",null,[s("li",null,[C,e(),t(l,null,{default:n(()=>[A]),_:1}),F]),s("li",null,[h,e(),t(l,null,{default:n(()=>[_]),_:1})])]),g,t(l,null,{default:n(()=>[m]),_:1}),b])}const P=o(i,[["render",T]]);export{k as __pageData,P as default};
