import{_ as t,H as o,o as n,c as l,L as p,w as r,V as s,k as e}from"./chunks/framework.fb592c47.js";const f=JSON.parse('{"title":"AutoComplete","description":"","frontmatter":{},"headers":[],"relativePath":"guide/autocomplete.md","filePath":"guide/autocomplete.md"}'),c={name:"guide/autocomplete.md"},i=s(`<h1 id="autocomplete" tabindex="-1">AutoComplete <a class="header-anchor" href="#autocomplete" aria-label="Permalink to &quot;AutoComplete&quot;">​</a></h1><p>Tab autocompletion saves a lot of time. It enables the user to type less of what they need thereby being not only interactive but also productive.</p><h2 id="how-does-it-work" tabindex="-1">How does it work? <a class="header-anchor" href="#how-does-it-work" aria-label="Permalink to &quot;How does it work?&quot;">​</a></h2><p>The user inputs data in the terminal and presses the <code>Enter</code> key, the input is saved in an internal history stack (accessible as an array). When the user types a partial string of an already input string, then presses the <code>Tab</code> key, we can loop through the history array for matches and set the most recent one as the input value iteratively.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In addition to that, we can also include an external list of strings to use when matching.</p></div><h2 id="implementation" tabindex="-1">Implementation <a class="header-anchor" href="#implementation" aria-label="Permalink to &quot;Implementation&quot;">​</a></h2><p>To implement the above methodology, we need the <a href="./../api/#history">term.history</a> which provide an copy of the entries.</p><p>we can now create and add the basic autocomplete function using <a href="./../api/#term-setcompleter">term.setCompleter()</a>.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> matches </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">term</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setCompleter</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">str</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">matches</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">matches</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">term</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">history</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">c</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">startsWith</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">str</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#F07178;">        )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">matches</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>The <code>matches</code> array is dynamic as it only keeps strings that start with the partial string <code>str</code>. The value on top of the stack, <code>matches</code>, is retrieved one at a time until it is empty thereby generating a new list of matched strings.</p><p>At this point, typing a few inputs, followed by the <code>Enter</code> key appends the input to our history stack. Typing a partial, followed by the <code>Tab</code> key, should do the job.</p><h2 id="illustration" tabindex="-1">Illustration <a class="header-anchor" href="#illustration" aria-label="Permalink to &quot;Illustration&quot;">​</a></h2><p>Take the following log as a sample, we can test the tab autocompletion after typing a partial <code>h</code></p>`,13),h=e("pre",null,[e("code",null,`[user] $ help
help
[user] $ hack
hack
[user] $ ls
ls
[user] $ history
history
[user] $ h▊
`)],-1),y=s("<p>Press <code>Tab</code> key just once sets the input value to <code>history</code>. Then <code>hack</code> after another hit, and finally <code>help</code>. Deleting two characters from the input string <code>help</code> leaves <code>he</code>, pressing the <code>Tab</code> key once more only moves on cycle to <code>help</code>.</p>",1);function d(u,m,F,D,A,C){const a=o("browser-preview");return n(),l("div",null,[i,p(a,null,{default:r(()=>[h]),_:1}),y])}const g=t(c,[["render",d]]);export{f as __pageData,g as default};
