import{_ as s,o as e,c as n,V as a}from"./chunks/framework.1b5edb90.js";const d=JSON.parse('{"title":"Key Bindings","description":"","frontmatter":{},"headers":[],"relativePath":"guide/keybindings.md","filePath":"guide/keybindings.md"}'),t={name:"guide/keybindings.md"},o=a(`<h1 id="key-bindings" tabindex="-1">Key Bindings <a class="header-anchor" href="#key-bindings" aria-label="Permalink to &quot;Key Bindings&quot;">​</a></h1><p>These are shortcuts to enhance the command-line experience. Basically, they are keyboard keys bound to your terminal to provide functionality that would ease the use.</p><div class="info custom-block"><p class="custom-block-title">Note</p><p>Key bindings to your terminal only work when the terminal is <strong>focused</strong> so that the action triggered is bound to that instance.</p></div><h2 id="enter-key" tabindex="-1">Enter Key <a class="header-anchor" href="#enter-key" aria-label="Permalink to &quot;Enter Key&quot;">​</a></h2><p>When the <code>Enter</code> key is pressed, the terminal captures the current input value, clears the input, adds value to the history stack and then fire the <code>data</code> event passing the input value.</p><h2 id="arrowup-key" tabindex="-1">ArrowUp Key <a class="header-anchor" href="#arrowup-key" aria-label="Permalink to &quot;ArrowUp Key&quot;">​</a></h2><p>When the <code>ArrowUp</code> key is pressed, it continously interates through the previous entries as it sets each entry as the current input.</p><p>It runs through the local history stack while setting the corresponding entry at a certian index as the current terminal input.</p><div class="info custom-block"><p class="custom-block-title">Note</p><p>No duplicate entries are pushed to the history stack. If the previous input is the same as the current, the latter won&#39;t be pushed to the history stack.</p></div><p>All in all, this key goes backwards in history.</p><h2 id="arrowdown-key" tabindex="-1">ArrowDown Key <a class="header-anchor" href="#arrowdown-key" aria-label="Permalink to &quot;ArrowDown Key&quot;">​</a></h2><p>In case the <code>ArrowUp</code> key is hit several times, to return to the most recent input, the <code>ArrowDown</code> key is used.</p><p>The <code>ArrowDown</code> key goes foreward in history by setting the most recent entry as the current input.If no previous input exist, the input is set to the previously buffered input, nothing otherwise.</p><h2 id="tab-key" tabindex="-1">Tab key <a class="header-anchor" href="#tab-key" aria-label="Permalink to &quot;Tab key&quot;">​</a></h2><p>Just like in real terminal applications, the <code>Tab</code> key provides the autocomplete future for the commands starting with the characters currently present in the terminal input.</p><p>If the terminal input is empty, then there are no characters to match.</p><p>For effective autocompletion, you must set a function that will work out the best matches. This is can be done using the <a href="./../api/#term-setcompleter">term.setCompleter()</a> method on the terminal instance which is discussed on the next page.</p><h2 id="custom-key-bindings" tabindex="-1">Custom Key Bindings <a class="header-anchor" href="#custom-key-bindings" aria-label="Permalink to &quot;Custom Key Bindings&quot;">​</a></h2><p>You can create your own key bindings and add the desired functionality for each one of them. We can employ the <a href="./events.html#default-events">keypress event</a> to attach the key bindings.</p><p><strong>Example:</strong></p><p>Suppose that you want to capture these shortcuts: <code>CTRL+S</code>, <code>ALT+D</code>, <code>CTRL+SHIFT+K</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">term</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">keypress</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">ev</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ev</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toLowerCase</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// CTRL+S</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">ev</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ctrlKey</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">s</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// use \`ev.cancel()\` to prevent default behaviour</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">ev</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">cancel</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// do something</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ALT+D</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">ev</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">altKey</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">d</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// do something</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// CTRL+SHIFT+K</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">ev</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ctrlKey</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ev</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">shiftKey</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">k</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// do something</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="next-step" tabindex="-1">Next Step <a class="header-anchor" href="#next-step" aria-label="Permalink to &quot;Next Step&quot;">​</a></h2><p>Enhance a rich interactive command-line interface with tab autocompletion.</p>`,24),l=[o];function p(r,c,i,y,h,F){return e(),n("div",null,l)}const u=s(t,[["render",p]]);export{d as __pageData,u as default};
