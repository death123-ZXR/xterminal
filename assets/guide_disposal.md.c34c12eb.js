import{_ as s,o as a,c as e,V as n}from"./chunks/framework.1b5edb90.js";const F=JSON.parse('{"title":"Disposal","description":"","frontmatter":{},"headers":[],"relativePath":"guide/disposal.md","filePath":"guide/disposal.md"}'),o={name:"guide/disposal.md"},l=n(`<h1 id="disposal" tabindex="-1">Disposal <a class="header-anchor" href="#disposal" aria-label="Permalink to &quot;Disposal&quot;">​</a></h1><p>Nearly everything that makes up the terminal is disposable. Right from the base class to the events that are dispatched, all these can be disposed.</p><h2 id="why-dispose" tabindex="-1">Why dispose? <a class="header-anchor" href="#why-dispose" aria-label="Permalink to &quot;Why dispose?&quot;">​</a></h2><p>The <code>XTerminal</code> package is lightweight and on top of that, we fight so hard that its efficient during runtime.</p><p>A disposable object refers to an object that can self detach itself from a parent via a <code>dispose</code> method.</p><p>With reference to the DOM, remember how <code>document.addEventListener</code> and <code>document.removeEventListener</code> work: one adds an event callback function and the other destroys it from the same event. It is nearly the same here.</p><p>The significance of the <code>dispose</code> method on an object is not only to manage memory but also ensure that certain functionality only runs at specific times it is needed.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><p>Let&#39;s say we have an array of functions, <code>arr</code> and a <code>dispose</code> function which when invoked clears the <code>arr</code> and set the flag <code>isDisposed</code> to <code>true</code>.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> isDisposed </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">dispose</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">isDisposed</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">isDisposed</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">splice</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>When <code>dispose</code> is called, the flag <code>isDisposed</code> ensures that it is executed only once.</p><blockquote><p>⚠️ under construction....</p></blockquote>`,12),p=[l];function t(c,r,i,d,y,D){return a(),e("div",null,p)}const h=s(o,[["render",t]]);export{F as __pageData,h as default};
