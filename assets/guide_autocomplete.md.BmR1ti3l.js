import{_ as a,E as i,c as n,J as h,w as o,a4 as e,o as l,m as s}from"./chunks/framework.DEGhkz86.js";const b=JSON.parse('{"title":"AutoComplete","description":"","frontmatter":{},"headers":[],"relativePath":"guide/autocomplete.md","filePath":"guide/autocomplete.md"}'),p={name:"guide/autocomplete.md"},r=e(`<h1 id="autocomplete" tabindex="-1">AutoComplete <a class="header-anchor" href="#autocomplete" aria-label="Permalink to &quot;AutoComplete&quot;">​</a></h1><p>Tab autocompletion saves a lot of time. It enables the user to type less of what they need thereby being not only interactive but also productive.</p><h2 id="how-does-it-work" tabindex="-1">How does it work? <a class="header-anchor" href="#how-does-it-work" aria-label="Permalink to &quot;How does it work?&quot;">​</a></h2><p>The user inputs data in the terminal and presses the <code>Enter</code> key, the input is saved in an internal history stack (accessible as an array). When the user types a partial string of an already input string, then presses the <code>Tab</code> key, you can loop through the history array for matches and set the most recent one as the input value iteratively.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In addition to that, you can also include an external list of strings to use when matching.</p></div><h2 id="implementation" tabindex="-1">Implementation <a class="header-anchor" href="#implementation" aria-label="Permalink to &quot;Implementation&quot;">​</a></h2><p>To implement the above methodology, you need the <a href="./../api/#history">term.history</a> which provide an copy of the entries.</p><p>Create and add the basic autocomplete function using <a href="./../api/#term-setcompleter">term.setCompleter()</a>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> matches</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">term.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setCompleter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">matches.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        matches.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">term.history.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> matches.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>The <code>matches</code> array is dynamic as it only keeps strings that start with the partial string <code>str</code>. The value on top of the stack, <code>matches</code>, is retrieved one at a time until it is empty thereby generating a new list of matched strings.</p><p>At this point, typing a few inputs, followed by the <code>Enter</code> key appends the input to our history stack. Typing a partial, followed by the <code>Tab</code> key, should do the job.</p><h2 id="illustration" tabindex="-1">Illustration <a class="header-anchor" href="#illustration" aria-label="Permalink to &quot;Illustration&quot;">​</a></h2><p>Take the following log as a sample, we can test the tab autocompletion after typing a partial <code>h</code></p>`,13),d=s("pre",null,[s("code",null,`[user] $ help
help
[user] $ hack
hack
[user] $ ls
ls
[user] $ history
history
[user] $ h▊
`)],-1),c=e("<p>Press <code>Tab</code> key just once sets the input value to <code>history</code>. Then <code>hack</code> after another hit, and finally <code>help</code>. Deleting two characters from the input string <code>help</code> leaves <code>he</code>, pressing the <code>Tab</code> key once more only moves on cycle to <code>help</code>.</p>",1);function k(E,y,u,m,g,_){const t=i("browser-preview");return l(),n("div",null,[r,h(t,null,{default:o(()=>[d]),_:1}),c])}const F=a(p,[["render",k]]);export{b as __pageData,F as default};
